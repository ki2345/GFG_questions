//Medium
class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int[][] dp = new int[W+1][wt.length+1];
        for(int[] a : dp){
            Arrays.fill(a, -1);
        }
        return Knapsack(wt, val, W, 0, dp);
    } 
    public static int Knapsack(int[] wt, int[] val, int c, int i, int[][] dp){
        if(c == 0 || i == wt.length){
            return 0;
        }
        if(dp[c][i] != -1){
            return dp[c][i];
        }
        int inc = 0;
        int exc = 0;
        if(c >= wt[i]){
            inc = val[i] + Knapsack(wt, val, c - wt[i], i+1, dp);
        }
        exc = Knapsack(wt, val, c, i+1, dp);
        return dp[c][i] = Math.max(inc, exc);
    }
}
