//Hard
//Using DFS
class Solution
{
    public int closedIslands(int[][] matrix, int N, int M)
    {
        // Code here
        int count = 0;
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(matrix[i][j] == 1 && (i == 0 || j == 0 || i == N-1 || j == M-1)){
                        dfs(i,j,matrix,N,M);
                }
            }
        }
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(matrix[i][j] == 1){
                    count++;
                    dfs(i,j,matrix,N,M);
                }
            }
        }
        return count;
    }
    public void dfs(int i,int j,int grid[][],int m,int n){
        if(i >= m || j >= n || i < 0 || j < 0 || grid[i][j] == 0) 
            return;
        grid[i][j] = 0;
        dfs(i-1,j,grid,m,n);
        dfs(i+1,j,grid,m,n);
        dfs(i,j-1,grid,m,n);
        dfs(i,j+1,grid,m,n);
    }
}
